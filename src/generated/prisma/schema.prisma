// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  PENDING_VALIDATION_EMAIL
  OK
  DEVENDO
  BLOCKED
}

enum UserRule {
  USER
  ADMIN
}

model User {
  id                                   String     @id @default(uuid())
  name                                 String
  email                                String     @unique
  password                             String
  phone                                String?
  emailConfirmationToken               String?
  emailConfirmationTokenExpirationDate DateTime?
  loginToken                           String?
  loginTokenExpirationDate             DateTime?
  resetPasswordToken                   String?
  resetPasswordTokenExpirationDate     DateTime?
  status                               UserStatus @default(PENDING_VALIDATION_EMAIL)
  rule                                 UserRule   @default(USER)

  address   Address[]
  sale      Sale[]
  OrderItem OrderItem[]
}

model Address {
  id           String  @id @default(uuid())
  usersId      String
  street       String
  number       String
  neighborhood String
  zipCode      String
  state        String
  country      String
  complement   String?

  user User @relation(fields: [usersId], references: [id])
}

model Category {
  id   String @id @default(uuid())
  name String

  product Product[]
}

model Product {
  id             String  @id @default(uuid())
  name           String
  originalPrice  Int
  promotionPrice Int?
  categoryId     String
  description    String?
  mainImage      String

  size          ProductSize[]
  imagesProduct ImagesProduct[]
  orderItem     OrderItem[]

  category Category @relation(fields: [categoryId], references: [id])
}

model ProductSize {
  id        String @id @default(uuid())
  size      String
  quantity  Int
  productId String

  OrderItem OrderItem[]

  product Product @relation(fields: [productId], references: [id])
}

model ImagesProduct {
  id        String @id @default(uuid())
  imageUrl  String
  productId String

  product Product @relation(fields: [productId], references: [id])
}

model Sale {
  id            String   @id @default(uuid())
  userId        String
  paymentMethod String?
  createAt      DateTime @default(now())

  orderItem OrderItem[]

  user User @relation(fields: [userId], references: [id])
}

enum StatusOrderItem {
  CART
  ORDERED
  PENDING
  FINISHED
}

model OrderItem {
  id            String          @id @default(uuid())
  userId        String
  productId     String
  productSizeId String
  amount        Int
  saleId        String?
  status        StatusOrderItem @default(CART)

  user        User        @relation(fields: [userId], references: [id])
  product     Product     @relation(fields: [productId], references: [id])
  productSize ProductSize @relation(fields: [productSizeId], references: [id])
  sale        Sale?       @relation(fields: [saleId], references: [id])
}

model SystemConfig {
  id           Int      @id @default(1)
  nameStore    String
  fileSoon     String
  CreationDate DateTime @default(now())
}
