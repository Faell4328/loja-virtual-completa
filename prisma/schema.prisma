// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  PENDING_VALIDATION_EMAIL
  OK
  DEVENDO
  BLOCKED
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                                   String     @id @default(uuid())
  name                                 String     @db.VarChar(100)
  email                                String     @unique @db.VarChar(100)
  password                             String     @db.VarChar(60)
  phone                                String?    @db.VarChar(11)
  emailConfirmationToken               String?    @unique @db.VarChar(128)
  emailConfirmationTokenExpirationDate DateTime?
  loginToken                           String?    @unique @db.VarChar(128)
  loginTokenExpirationDate             DateTime?
  resetPasswordToken                   String?    @unique @db.VarChar(128)
  resetPasswordTokenExpirationDate     DateTime?
  status                               UserStatus @default(PENDING_VALIDATION_EMAIL)
  role                                 UserRole   @default(USER)
  creationDate                         DateTime   @default(now())
  updateDate                           DateTime?

  address   Address[]
  sale      Sale[]
  OrderItem OrderItem[]
}

model Address {
  id           String    @id @default(uuid())
  usersId      String    @unique
  description  String    @db.VarChar(100)
  street       String    @db.VarChar(100)
  number       String    @db.VarChar(20)
  neighborhood String    @db.VarChar(100)
  zipCode      String    @db.VarChar(9)
  state        String    @db.VarChar(2)
  complement   String?   @db.VarChar(100)
  creationDate DateTime  @default(now())
  updateDate   DateTime?

  user User @relation(fields: [usersId], references: [id])
}

model Category {
  id           String    @id @default(uuid())
  name         String    @db.VarChar(100)
  creationDate DateTime  @default(now())
  updateDate   DateTime?

  product Product[]
}

model Product {
  id             String    @id @default(uuid())
  name           String    @db.VarChar(100)
  originalPrice  Int
  promotionPrice Int?
  categoryId     String
  description    String?   @db.VarChar(200)
  mainImage      String
  creationDate   DateTime  @default(now())
  updateDate     DateTime?

  size          ProductSize[]
  imagesProduct ImagesProduct[]
  orderItem     OrderItem[]

  category Category @relation(fields: [categoryId], references: [id])
}

model ProductSize {
  id           String    @id @default(uuid())
  size         String    @db.VarChar(10)
  quantity     Int
  productId    String
  creationDate DateTime  @default(now())
  updateDate   DateTime?

  OrderItem OrderItem[]

  product Product @relation(fields: [productId], references: [id])
}

model ImagesProduct {
  id           String    @id @default(uuid())
  imageUrl     String
  productId    String
  creationDate DateTime  @default(now())
  updateDate   DateTime?

  product Product @relation(fields: [productId], references: [id])
}

model Sale {
  id            String    @id @default(uuid())
  userId        String
  paymentMethod String?   @db.VarChar(50)
  creationDate  DateTime  @default(now())
  updateDate    DateTime?

  orderItem OrderItem[]

  user User @relation(fields: [userId], references: [id])
}

enum StatusOrderItem {
  CART
  ORDERED
  PENDING
  FINISHED
}

model OrderItem {
  id            String          @id @default(uuid())
  userId        String
  productId     String
  productSizeId String
  amount        Int
  saleId        String?
  status        StatusOrderItem @default(CART)
  creationDate  DateTime        @default(now())
  updateDate    DateTime?

  user        User        @relation(fields: [userId], references: [id])
  product     Product     @relation(fields: [productId], references: [id])
  productSize ProductSize @relation(fields: [productSizeId], references: [id])
  sale        Sale?       @relation(fields: [saleId], references: [id])
}

model SystemConfig {
  id             Int       @id @default(1)
  nameStore      String    @db.VarChar(100)
  fileSoon       String
  statusWhatsapp String
  creationDate   DateTime  @default(now())
  updateDate     DateTime?
}
